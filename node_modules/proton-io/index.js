//#############
// ProtonModule for TheFunt, Duck and every Discord bot!
// This module created by Venosa Studio.
// This module throught easy module handler 
// All rights reserved.
// Copyright (C) Venosa Studio 2020
// Copyright (C) Aktila Cengiz.
//#############

//################################# 
// Dependencies
const { Collection } = require("discord.js")
const fs = require('fs')
const chalk = require("chalk")
//################################# 

// ##############
//Error Messages
const errorTitle = chalk.red("@ | Proton Hata! : ")
const exampleTitle = chalk.blue("@  | Örnek: ")
const holdMessage = chalk.green("@ | Bot başlatılıyor.. \n Copyright (C) Proton!")
const holdMessage2 = chalk.red(">> Copyright Proton [Venosa Studio] <<")
const commandLoadedMessage = chalk.yellow("@ | Komut yüklendi: ")
// ##############

module.exports = class {
    constructor(client,komutKlasör,eventLoad, ownerID, options) {
        options = options || {yardımKomutu: false} //eğer yardım komutu belirtilmemişse otomatik yoksay.
        if (!client) throw new ReferenceError(errorTitle + "Lütfen geçerli bir client beliritiniz.")
        if (!komutKlasör) throw new ReferenceError(errorTitle + "Lütfen komut klasörünüzü belirtiniz.")
        if (!ownerID) throw new ReferenceError(errorTitle + "Lütfen bir bot sahibi ID'si belirtiniz.")

        //######
        // Some import 
        this.client=client
        this.ownerID =  ownerID[0]
        this.ownerID2 = ownerID[1]
        //######


        //########
        // eventLoader
        //########
        /*
        */
       fs.readdir(eventLoad, (err, files) => {
        if (err) return console.error(err);
        files.forEach(file => {
          const event = require(`../../${eventLoad}/${file}`);
          let eventName = file.split(".")[0];
          client.on(eventName, event.bind(null, client));
        });
      });


        //########
        // command Handler
        //########
        
        //############
        // if(ready?) go on!
        console.log(holdMessage)
        console.log(holdMessage2)
       //############
        client.commands=new Collection()
        client.aliases=new Map()
        var commandFiles = fs
        .readdirSync(`${komutKlasör}`)
        .filter(file => file.endsWith('.js'));
      for (var file of commandFiles) {
        var command = require(`../../${komutKlasör}/${file}`);
        console.log(commandLoadedMessage + chalk.green(command.name))
        client.commands.set(command.name, command);
        if (command.aliases && Array.isArray(command.aliases)) command.aliases.forEach(alias => client.aliases.set(alias, command.name));
      }


      if(options.owner) {

// |||||||||||||||||||||||
// Reload Command
// |||||||||||||||||||||||

        client.commands.set('reload',{
            name: 'reload',
            aliases: ["reload"],
            description: "Botu reloadlarsınız.",
            usage: "reload [komut adı]",
            ownerOnly:true,
            run: async (message,args,client) => {
                if(!args[0]) {
                    return message.channel.send("Lütfen bir komut ismi yazınız.")
                  }
                    
                  let command;
                  if (client.commands.has(args[0])) {
                    command = args[0];
                  } else if (client.aliases.has(args[0])) {
                    command = client.aliases.get(args[0]);
                  }
                  if (!command) {
                    return message.channel.send(`**${command}** adlı bir komut bulunamadı.`)
                  } else {
                    message.channel.send(`**${command}** adlı komut güncelleniyor..`)
                      .then(m => {
                        delete require.cache[require.resolve(`../../${komutKlasör}/${command}.js`)]
                        try {
                          const newCommand = require(`../../${komutKlasör}/${command}.js`);
                          message.client.commands.set(newCommand.name, newCommand);
                        } catch (error) {
                          console.log(error);
                          message.channel.send(`Komut güncellenirken bir hata oluştu: \`${command}\`:\n\`${error.message}\``);
                        }
                          m.edit(` **${command}** adlı komut güncellendi.`);
                      });
                  }
        }})
        client.aliases.set('reload','rel')


// |||||||||||||||||||||||
// Load Command
// |||||||||||||||||||||||

client.commands.set('load',{
  name: 'load',
  aliases: ["load"],
  description: "Bota komut eklersiniz.",
  usage: "load [komut adı]",
  ownerOnly:true,
  run: async (message,args,client) => {
      if(!args[0]) {
          return message.channel.send("Lütfen bir komut ismi yazınız.")
        }
          
        let command;
        
        message.channel.send(`**${command}** adlı komut yükleniyor...`)
            .then(m => {
              try {
                const newCommand = require(`../../${komutKlasör}/${command}.js`);
                message.client.commands.set(newCommand.name, newCommand);
              } catch (error) {
                console.log(error);
                message.channel.send(`Komut güncellenirken bir hata oluştu: \`${command}\`:\n\`${error.message}\``);
              }
                m.edit(` **${command}** adlı komut yüklendi..`);
            });
        }
})
client.aliases.set('laod','load')

// |||||||||||||||||||||||
// Unload Command
// |||||||||||||||||||||||
client.commands.set('unload',{
  name: 'unload',
  aliases: ["unload"],
  description: "unload.",
  usage: "unload [komut adı]",
  ownerOnly:true,
  run: async (message,args,client) => {
      if(!args[0]) {
          return message.channel.send("Lütfen bir komut ismi yazınız.")
        }
          
        let command;
        if (client.commands.has(args[0])) {
          command = args[0];
        } else if (client.aliases.has(args[0])) {
          command = client.aliases.get(args[0]);
        }
        if (!command) {
          return message.channel.send(`**${command}** adlı bir komut bulunamadı.`)
        } else {
          message.channel.send(`**${command}** adlı komut devre dışı bırakılıyor..`)
            .then(m => {
              delete require.cache[require.resolve(`../../${komutKlasör}/${command}.js`)]
              message.client.commands.remove(command.name, command);

                m.edit(` **${command}** adlı komut kapatıldı.`);
            });
        }
}})
client.aliases.set('unload','unload')

// |||||||||||||||||||||||
// Restart Command
// |||||||||||||||||||||||
client.commands.set('restart',{
    name: 'restart',
    aliases: ["restart"],
    description: "Botu yeniden başlatırsınız.",
    usage: "restart [komut adı]",
    ownerOnly:true,
    run: async (message,args,client) => {
     
        const restart = require("./Other/restart")

        message.channel.send("Bot yeniden başlatılıyor..").then(() => {
            restart();
        })    
}})
client.aliases.set('restart','restart')

// |||||||||||||||||||||||
// Eval command
// |||||||||||||||||||||||

const clean = text => {
  if (typeof(text) === "string")
    return text.replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));
  else
      return text;
}

client.commands.set('eval',{
  name: 'eval',
  aliases: ["eval"],
  description: "Botta kod çalıştırırsınız.",
  usage: "eval [komut adı]",
  ownerOnly:true,
  run: async (message,args,client) => {
       try {
      const code = args.join(" ");

      if(!code) return message.channel.send("Lütfen denenecek bir kod yazınız.")
      let evaled = eval(code);
 
      if (typeof evaled !== "string")
        evaled = require("util").inspect(evaled);
 
      message.channel.send(clean(evaled), {code:"xl"});
    } catch (err) {
      message.channel.send(`\`Statik bir hata oluştu:\` \`\`\`xl\n${clean(err)}\n\`\`\``);
    }
 
}})
client.aliases.set('eval','eval')



      }

if(options.defaultCommands) {

// |||||||||||||||||||||||
// ping command
// |||||||||||||||||||||||
if(options.defaultCommands == "ping") {
        
client.commands.set('ping',{
  name: 'ping',
  aliases: ["ping"],
  description: "Botun pingini ölçersiniz.",
  usage: "ping",
  ownerOnly:false,
  run: async (message,args,client) => {
              
     var holdMessage = " *Ping ölçülüyor..*"

     var holdMessage2 = " *Ping ölçülüyor...* "

     var pingMessage = ':ping_pong: | **'+ Math.round(client.ws.ping) +'ms** olarak ölçüldü.'

     message.channel.send(holdMessage).then(msg => {
         setTimeout(() => {
            msg.edit(holdMessage2)
         }, 1000);
         setTimeout(() => {
            msg.edit(pingMessage)
         }, 3000)
     })
 
}})
client.aliases.set('ping','ping')


        }

      }

}

   

 
      /* if (options.yardımKomutu) {
        function getCMD(msg,args,client) {
            if (!client.commands.get(args.toLowerCase())){
                if (!client.aliases.get(args.toLowerCase())) return msg.channel.send(errorTitle + `Bir komut hakkında bir açıklama bulunamadı: **${args}**`)
            }
            const cmd = client.commands.get(client.commands.find(cmd => cmd.name === commandName))
            console.log(cmd)
            let info = ""
            if (cmd.name) info = `**Komut adı:**: ${cmd.name}`
            if (cmd.aliases) info += `\n**Alternatifler:**: ${cmd.aliases.map(a => `\`${a}\``).join(", ")}`
            if (cmd.description) info += `\n**Açıklama**: ${cmd.description}`
            if (cmd.usage) info += `\n**Kullanım**: ${cmd.usage}`
            return msg.channel.send({embed: {
                title: `**${cmd.name}** komutu nasıl kullanılır?`,
                description: info,
                footer: {
                    text: "ProtonModule by Venosa.xyz"
                }
            }});
            }

            console.log(client.commands.map(c=> console.log(c)))
        function getAll(msg,client) {
            msg.channel.send({embed: {
                title: "Yardım",
                description: `${client.commands.map(c => `\`\`${c.name}\`\``).join(', ')}`
            }})
        }
        client.commands.set('yardım',{
            name: 'yardım',
            aliases: ['yardım',"help"],
            description: "Size yardım verir.",
            usage: "yardım [komut adı]",
            run: async (msg,args,client) => {
            if (args[0]) {
                return getCMD(msg,args[0],client);
            } else {
                return getAll(msg);
            }
        }})
        client.aliases.set('yardım','help')
    }*/


    message(msg,prefix="!",options) {
        options = options || {botlaraCevapVer: false,etiketiPrefixOlarakKullan: true,etiketlePrefixOgren: true}
        if (!msg) throw new ReferenceError(" Error ..")
        if (!options.botlaraCevapVer) {
            if (msg.author.bot) return;
        }
        let p=prefix
        if (options.etiketlePrefixOgren) {
            if (msg.content === `<@!${this.client.user.id}>`) return msg.channel.send(`Selamlar bu sunucudaki prefixim: **${p}**`)
        }
        if (options.etiketiPrefixOlarakKullan) {
            if (msg.content.startsWith(`<@!${this.client.user.id}>`)) p=`<@!${this.client.user.id}>`
       }
       if (msg.webhookID || msg.channel.type === "dm" || !msg.content || !msg.channel.guild) return;
        if (!msg.content.startsWith(p)) return;
        const commandName = msg.content.slice(p.length).trim().split(' ')[0]
        const args = msg.content.slice(p.length).trim().split(' ').slice(1)
        const command = this.client.commands.get(commandName)
          || this.client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName))
        if (!command) {
            return;
        };
        if (command.ownerOnly) {
          if (!this.ownerID.includes(msg.author.id) && !this.ownerID2.includes(msg.author.id)) return msg.reply("Bu komutu yalnızca `bot geliştiricileri` kullanabilir!")
        }
        try {
            command.run(msg,args,this.client)
        } catch (e) {
            console.log(e)
            msg.channel.send(`Bir hata oluştu. Lütfen **${commandName}** komutunda hata olduğunu sahiplerime bildiriniz.`)
        }
    }
}
//################################# 
// Everything start with end.
// - Aktila Cengiz
//################################# 
